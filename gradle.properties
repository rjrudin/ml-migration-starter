group 'com.marklogic'
version '2.0.0'

# This can be a comma-delimited sequence of host names
# Example - hosts=host1.example.com,host2.example.com,host3.example.com
hosts=localhost

# Whether to use XCC or REST; any value besides true means REST
xcc=false

# Port and database to write to
port=8000
database=Documents
auth=digest

# ML user to insert data as
username=admin
password=admin

# How many threads to write to ML with
thread_count=16

# Number of rows to read at one time, and thus number of documents to write to ML at one time
chunk=100

#
# Everything below controls what RDBMS is read from, what rows are read, and then some details about the documents
# that are inserted into MarkLogic.
#

# JDBC connection details - change these from the sample H2 values to the correct values for your database
jdbc_driver=org.h2.Driver
jdbc_url=jdbc:h2:file:./h2data/sample
jdbc_username=sa
jdbc_password=password

# Set this to true to query all tables, which will ignore the 'sql' and 'root_local_name' properties below
all_tables=true

# SQL query for rows to write as documents in ML
sql=SELECT * FROM Customer

# Local name of root element in each XML document that's written to ML
root_local_name=Customer

# Comma-delimited collections to insert documents into
# If you set all_tables to true, it's recommended to set this to something generic or nothing at all, as each document
# will be inserted into a collection named after the table that the corresponding row came from
collections=migrated

# Permissions to apply to documents - takes the form of role,capability,role,capability,etc
permissions=rest-reader,read,rest-writer,update

# Set to json to create JSON documents instead of XML; any other value will result in XML documents
document_type=xml
